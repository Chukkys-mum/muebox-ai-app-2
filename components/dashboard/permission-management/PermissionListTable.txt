'use client';

import React, { useState, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/utils/supabase/client';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import CardMenu from '@/components/card/CardMenu';
import { Checkbox } from '@nextui-org/react';
import { createColumnHelper, useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';

// Define the structure of the PermissionRow data type
type PermissionRow = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
};

// Component Props Interface
interface PermissionListTableProps {
  tableData: PermissionRow[];
  onDelete?: (id: string) => void;
  isLoading?: boolean;
}

const PermissionListTable = ({ tableData, onDelete, isLoading = false }: PermissionListTableProps) => {
  const supabase = useMemo(() => createClient(), []); // Initialize client on the client-side
  const router = useRouter();
  const { toast } = useToast();
  
  // State management
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<string[]>([]);
  const [isDeleting, setIsDeleting] = useState(false);
  const [selectedKeys, setSelectedKeys] = useState<Set<string>>(new Set());
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [page, setPage] = useState(1);
  
  const totalPages = Math.ceil(tableData.length / rowsPerPage);

  const columnHelper = createColumnHelper<PermissionRow>();

  // Handlers for row selection
  const toggleSelectAll = () => {
    setSelectedKeys(
      selectedKeys.size === tableData.length ? new Set() : new Set(tableData.map((row) => row.id))
    );
  };

  const toggleSelectRow = (id: string) => {
    setSelectedKeys((prevKeys) => {
      const newKeys = new Set(prevKeys);
      newKeys.has(id) ? newKeys.delete(id) : newKeys.add(id);
      return newKeys;
    });
  };

  // Delete handlers
  const handleDelete = (ids: string | string[]) => {
    const itemIds = Array.isArray(ids) ? ids : [ids];
    setItemsToDelete(itemIds);
    setIsDeleteModalOpen(true);
  };

  const confirmDelete = async () => {
    if (!itemsToDelete.length) return;

    try {
      setIsDeleting(true);
      const { error } = await supabase
        .from('permissions')
        .delete()
        .in('id', itemsToDelete);

      if (error) throw error;

      toast({
        title: "Success",
        description: `Successfully deleted ${itemsToDelete.length} permission${itemsToDelete.length > 1 ? 's' : ''}.`,
      });

      // Clear selections and refresh
      setSelectedKeys(new Set());
      itemsToDelete.forEach(id => onDelete?.(id));
      router.refresh();
    } catch (error) {
      console.error('Error deleting permissions:', error);
      toast({
        title: "Error",
        description: "Failed to delete permissions. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
      setItemsToDelete([]);
      setIsDeleteModalOpen(false);
    }
  };

  // Define columns using the reusable CheckboxCell component
  const columns = [
    columnHelper.display({
      id: 'select',
      header: () => (
        <div className="table-cell-centered">
          <input
            type="checkbox"
            className="defaultCheckbox"
            aria-label="Select All"
            checked={selectedKeys.size === tableData.length}
            onChange={toggleSelectAll}
          />
        </div>
      ),
      cell: (info) => (
        <div className="table-cell-centered">
          <input
            type="checkbox"
            className="defaultCheckbox"
            aria-label="Select Row"
            checked={selectedKeys.has(info.row.original.id)}
            onChange={() => toggleSelectRow(info.row.original.id)}
          />
        </div>
      ),
    }),
    columnHelper.accessor('name', {
      id: 'name',
      header: () => <p className="text-xs font-semibold uppercase text-gray-900 dark:text-gray-100">Permission Scheme Name</p>,
      cell: (info) => (
        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
          {info.getValue()}
        </p>
      ),
    }),
    columnHelper.accessor('description', {
      id: 'description',
      header: () => (
        <p className="text-xs font-semibold uppercase text-gray-900 dark:text-gray-100">
          Description
        </p>
      ),
      cell: (info) => (
        <p className="text-sm text-gray-900 dark:text-gray-100">
          {info.getValue() || 'No description'}
        </p>
      ),
    }),
    columnHelper.accessor('status', {
      id: 'status',
      header: () => <p className="text-xs font-semibold uppercase text-gray-900 dark:text-gray-100">Status</p>,
      cell: (info) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          info.getValue().toLowerCase() === 'active' 
            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100'
            : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100'
        }`}>
          {info.getValue()}
        </span>
      ),
    }),
    columnHelper.accessor('createdAt', {
      id: 'createdAt',
      header: () => <p className="text-xs font-semibold uppercase text-gray-900 dark:text-gray-100">Created At</p>,
      cell: (info) => (
        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
          {new Date(info.getValue()).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          })}
        </p>
      ),
    }),
    columnHelper.display({
      id: 'actions',
      header: () => <p className="text-xs font-semibold uppercase text-gray-900 dark:text-gray-100">Actions</p>,
      cell: (info) => (
        <CardMenu
          vertical
          options={[
            { 
              label: 'View', 
              action: () => router.push(`/dashboard/user-management/permission-management/view/${info.row.original.id}`) 
            },
            { 
              label: 'Edit', 
              action: () => router.push(`/dashboard/user-management/permission-management/edit/${info.row.original.id}`) 
            },
            { 
              label: 'Delete', 
              action: () => handleDelete(info.row.original.id),
              className: 'text-red-600 dark:text-red-400'
            },
          ]}
        />
      ),
    }),
  ];
  
  const table = useReactTable({
    data: tableData,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <Card className="h-full w-full p-0 dark:border-zinc-800 sm:overflow-auto">
      {/* Loading State */}
      {isLoading ? (
        <div className="flex items-center justify-center h-full">
          <div className="h-32 w-32 animate-spin rounded-full border-b-2 border-t-2 border-gray-900 dark:border-white"></div>
        </div>
      ) : !tableData.length ? (
        // Empty State
        <div className="flex flex-col items-center justify-center h-full text-center p-6 dark:border-zinc-800">
          <p className="mb-4 text-lg font-medium">No permissions found</p>
          <Button
            onClick={() => router.push('/dashboard/user-management/permission-management/new')}
          >
            Create New Permission Scheme
          </Button>
        </div>
      ) : (
        // Table Content
        <>
          {/* Pagination and Rows Per Page Controls */}
          <div className="flex justify-between items-center p-4">
            <div className="flex items-center">
              <span className="text-sm" style={{ color: "hsl(var(--foreground))" }}>
                Total {tableData.length} permissions
              </span>
              {selectedKeys.size > 0 && (
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => handleDelete(Array.from(selectedKeys))}
                  className="ml-4"
                >
                  Delete Selected ({selectedKeys.size})
                </Button>
              )}
            </div>
            <label className="flex items-center text-sm" style={{ color: "hsl(var(--foreground))" }}>
              Rows per page:
              <select
                className="bg-transparent outline-none text-sm ml-2"
                style={{
                  color: "hsl(var(--foreground))",
                  backgroundColor: "hsl(var(--background))",
                  borderColor: "hsl(var(--border))",
                }}
                onChange={(e) => {
                  setRowsPerPage(Number(e.target.value));
                  setPage(1);
                }}
                value={rowsPerPage}
              >
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
              </select>
            </label>
          </div>

          {/* Table Section */}
          <div className="overflow-x-scroll xl:overflow-x-hidden">
            <Table className="w-full">
              <TableHeader className="border-b dark:border-zinc-800">
                {table.getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id}>
                    {headerGroup.headers.map((header) => (
                      <TableHead 
                        key={header.id} 
                        colSpan={header.colSpan}
                        className="pl-5 pr-4 pt-2"
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                      </TableHead>
                    ))}
                  </tr>
                ))}
              </TableHeader>
              <TableBody>
                {table.getRowModel().rows.slice((page - 1) * rowsPerPage, page * rowsPerPage).map((row) => (
                  <TableRow key={row.id} className="px-6 dark:hover:bg-zinc-800">
                    {row.getVisibleCells().map((cell) => (
                      <TableCell 
                        key={cell.id} 
                        className="border-b py-5 pl-5 pr-4 dark:border-white/10"
                      >
                        {flexRender(cell.column.columnDef.cell, cell.getContext())}
                      </TableCell>
                    ))}
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {/* Pagination Controls */}
          <div className="flex justify-between items-center p-4">
            {/* Selected Items Display */}
            <span className="text-sm" style={{ color: "hsl(var(--foreground))" }}>
              {selectedKeys.size === tableData.length 
                ? "All items selected" 
                : `${selectedKeys.size} of ${tableData.length} selected`}
            </span>

            {/* Centered Pagination Navigation */}
            <div className="flex justify-center items-center gap-2 w-[30%]">
              <button
                className="rounded-full p-2 bg-transparent hover:bg-gray-200 dark:hover:bg-gray-700"
                onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
                disabled={page === 1}
                aria-label="Previous Page"
              >
                &lt;
              </button>
              
              <div className="flex space-x-2">
                {[...Array(totalPages)].map((_, index) => (
                  <button
                    key={index + 1}
                    className={`rounded-full px-3 py-1 ${
                      page === index + 1 ? "bg-blue-500 text-white" : "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300"
                    }`}
                    onClick={() => setPage(index + 1)}
                  >
                    {index + 1}
                  </button>
                ))}
              </div>
              
              <button
                className="rounded-full p-2 bg-transparent hover:bg-gray-200 dark:hover:bg-gray-700"
                onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={page === totalPages}
                aria-label="Next Page"
              >
                &gt;
              </button>
            </div>

            {/* Next and Previous Buttons for Larger Screens */}
            <div className="hidden sm:flex w-[30%] justify-end gap-2">
              <button
                className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md"
                onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
                disabled={page === 1}
              >
                Previous
              </button>
              <button
                className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md"
                onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={page === totalPages}
              >
                Next
              </button>
            </div>
          </div>
        </>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteModalOpen} onOpenChange={() => !isDeleting && setIsDeleteModalOpen(false)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Delete</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete {itemsToDelete.length > 1 
                ? `these ${itemsToDelete.length} permission schemes` 
                : "this permission scheme"}?
              This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => setIsDeleteModalOpen(false)}
              disabled={isDeleting}
            >
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={confirmDelete}
              disabled={isDeleting}
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
}

export default PermissionListTable;